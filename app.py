"""
Aplica√ß√£o Streamlit para an√°lise de sentimentos de coment√°rios do YouTube usando a API do Gemini.
"""

import os
import streamlit as st
import pandas as pd
import plotly.express as px
from dotenv import load_dotenv, find_dotenv

from youtube_extractor import YouTubeCommentExtractor
from sentiment_analyzer import GeminiSentimentAnalyzer

# Carregar vari√°veis de ambiente
dotenv_path = find_dotenv()
if not dotenv_path:
    # Se o arquivo .env n√£o existir, cria um novo
    dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
    if not os.path.exists(dotenv_path):
        with open(dotenv_path, 'w') as f:
            f.write("# Chaves de API\n")
            f.write("YOUTUBE_API_KEY=\n")
            f.write("GEMINI_API_KEY=\n")

load_dotenv(dotenv_path)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Analisador de Coment√°rios do YouTube",
    page_icon="üé¨",
    layout="wide"
)

# T√≠tulo e descri√ß√£o
st.title("üé¨ Analisador de Coment√°rios do YouTube com Gemini")
st.markdown("""
Esta aplica√ß√£o extrai coment√°rios de v√≠deos do YouTube e os analisa usando a API do Gemini
para classificar o sentimento como positivo, negativo ou neutro.
""")

# Inicializar vari√°veis de estado da sess√£o se n√£o existirem
if 'last_video_url' not in st.session_state:
    st.session_state.last_video_url = ""

# Sidebar para configura√ß√µes
st.sidebar.title("Configura√ß√µes")

# Op√ß√£o para usar dados de exemplo
use_example_data = st.sidebar.checkbox("Usar dados de exemplo", value=False)

if not use_example_data:
    # Entrada das chaves de API
    st.sidebar.subheader("Chaves de API")

    # Obter chaves salvas
    youtube_api_key = os.getenv("YOUTUBE_API_KEY", "")
    gemini_api_key = os.getenv("GEMINI_API_KEY", "")

    # Mostrar status das chaves
    if youtube_api_key:
        st.sidebar.success("‚úÖ Chave de API do YouTube est√° configurada")
    else:
        st.sidebar.warning("‚ö†Ô∏è Chave de API do YouTube n√£o configurada")

    if gemini_api_key:
        st.sidebar.success("‚úÖ Chave de API do Gemini est√° configurada")
    else:
        st.sidebar.warning("‚ö†Ô∏è Chave de API do Gemini n√£o configurada")

    # Informa√ß√£o sobre configura√ß√£o das chaves
    if not youtube_api_key or not gemini_api_key:
        with st.sidebar.expander("‚ÑπÔ∏è Como configurar as chaves de API"):
            st.markdown("""
            **Para configurar as chaves de API:**

            1. Crie um arquivo `.env` na pasta da aplica√ß√£o
            2. Adicione as seguintes linhas:
            ```
            YOUTUBE_API_KEY=sua_chave_youtube_aqui
            GEMINI_API_KEY=sua_chave_gemini_aqui
            ```
            3. Reinicie a aplica√ß√£o

            **Como obter as chaves:**
            - **YouTube API**: [Google Cloud Console](https://console.cloud.google.com/)
            - **Gemini API**: [Google AI Studio](https://aistudio.google.com/)
            """)

    # Entrada da URL do v√≠deo
    st.sidebar.subheader("Configura√ß√µes de An√°lise")
    video_url = st.sidebar.text_input("URL do v√≠deo do YouTube")

    # Verificar se a URL do v√≠deo mudou
    if video_url != st.session_state.last_video_url and video_url != "":
        # Se a URL mudou e n√£o est√° vazia, limpar os dados anteriores
        if 'analyzed' in st.session_state:
            del st.session_state.analyzed
        if 'results' in st.session_state:
            del st.session_state.results
        if 'extraction_info' in st.session_state:
            del st.session_state.extraction_info

        # Atualizar a URL armazenada
        st.session_state.last_video_url = video_url

        # Mostrar mensagem informando que os dados foram limpos
        st.sidebar.success("Nova URL detectada. Dados do v√≠deo anterior foram limpos.")

    # N√∫mero de coment√°rios
    max_comments = st.sidebar.slider("N√∫mero m√°ximo de coment√°rios", 10, 300, 30)

    # Filtro para tipo de coment√°rios a serem extra√≠dos
    st.sidebar.subheader("Filtro de Extra√ß√£o")
    comment_type_options = ["Todos os coment√°rios", "Apenas coment√°rios principais", "Apenas respostas"]
    comment_type_filter = st.sidebar.radio("Tipo de coment√°rios a extrair:", comment_type_options)

    # Campo para prompt personalizado
    st.sidebar.subheader("Prompt Personalizado")

    # Op√ß√£o para usar prompt personalizado
    use_custom_prompt = st.sidebar.checkbox("Usar prompt personalizado", value=False)

    custom_prompt = ""
    if use_custom_prompt:
        custom_prompt = st.sidebar.text_area(
            "Digite seu prompt personalizado:",
            placeholder="Ex: Analise este coment√°rio considerando aspectos de toxicidade, ironia e contexto cultural brasileiro...",
            height=100,
            help="O prompt personalizado ser√° usado para analisar os coment√°rios. O sistema ainda retornar√° sentiment, score e explanation no formato padr√£o."
        )

        # Mostrar explica√ß√£o sobre o prompt personalizado
        with st.sidebar.expander("‚ÑπÔ∏è Como usar o prompt personalizado"):
            st.markdown("""
            **Dicas para criar um bom prompt:**
            - Seja espec√≠fico sobre o que voc√™ quer analisar
            - Mencione crit√©rios espec√≠ficos (ex: ironia, sarcasmo, contexto cultural)
            - O sistema sempre retornar√°: sentimento (positivo/negativo/neutro), pontua√ß√£o (-1 a 1) e explica√ß√£o
            - Exemplos de prompts:
              - "Analise considerando ironia e sarcasmo"
              - "Foque em aspectos de toxicidade e agressividade"
              - "Considere o contexto cultural brasileiro"
            """)
    else:
        custom_prompt = None
else:
    # Usar dados de exemplo
    youtube_api_key = "exemplo"
    gemini_api_key = "exemplo"
    video_url = "https://www.youtube.com/watch?v=exemplo"
    max_comments = 30
    use_custom_prompt = False  # N√£o usar prompt personalizado com dados de exemplo
    custom_prompt = None

    # Criar dados de exemplo
    @st.cache_data
    def get_example_data():
        data = {
            'author': ['Usu√°rio 1', 'Usu√°rio 2', 'Usu√°rio 3', 'Usu√°rio 4', 'Usu√°rio 5'],
            'text': [
                'Adorei esse v√≠deo! Muito informativo e bem produzido.',
                'N√£o gostei do conte√∫do, achei muito superficial.',
                'Interessante, mas poderia ter mais exemplos pr√°ticos.',
                'P√©ssimo v√≠deo, perda de tempo.',
                'Conte√∫do excelente, j√° compartilhei com meus amigos!'
            ],
            'likes': [15, 2, 8, 1, 20],
            'published_at': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'],
            'sentiment': ['positivo', 'negativo', 'neutro', 'negativo', 'positivo'],
            'score': [0.8, -0.6, 0.1, -0.9, 0.9],
            'explanation': [
                'O coment√°rio expressa entusiasmo e elogia a qualidade do v√≠deo.',
                'O coment√°rio expressa insatisfa√ß√£o com o conte√∫do do v√≠deo.',
                'O coment√°rio reconhece aspectos positivos, mas tamb√©m sugere melhorias.',
                'O coment√°rio expressa forte insatisfa√ß√£o e frustra√ß√£o.',
                'O coment√°rio expressa entusiasmo e indica que o usu√°rio recomendou o conte√∫do.'
            ]
        }
        return pd.DataFrame(data)

# Fun√ß√£o para extrair e analisar coment√°rios
def extract_and_analyze(custom_prompt=None):
    # Verificar se as chaves de API foram fornecidas
    if not youtube_api_key or not gemini_api_key:
        st.error("Por favor, forne√ßa as chaves de API do YouTube e do Gemini.")
        return None

    if use_example_data:
        return get_example_data()

    if not video_url:
        st.error("Por favor, forne√ßa a URL de um v√≠deo do YouTube.")
        return None

    # Extrair coment√°rios
    with st.spinner("Extraindo coment√°rios do YouTube..."):
        try:
            extractor = YouTubeCommentExtractor(youtube_api_key)
            video_id = extractor.extract_video_id(video_url)

            if not video_id:
                st.error("URL de v√≠deo inv√°lida. Por favor, verifique e tente novamente.")
                return None

            # Obter detalhes do v√≠deo
            video_details = extractor.get_video_details(video_id)
            if video_details:
                st.subheader("Detalhes do V√≠deo")
                st.write(f"**T√≠tulo:** {video_details['title']}")
                st.write(f"**Canal:** {video_details['channel']}")
                st.write(f"**Visualiza√ß√µes:** {video_details['view_count']}")
                st.write(f"**Likes:** {video_details['like_count']}")
                st.write(f"**Total de coment√°rios:** {video_details['comment_count']}")

            # Determinar o tipo de coment√°rio a ser extra√≠do com base no filtro
            extract_main = True
            extract_replies = True

            if comment_type_filter == "Apenas coment√°rios principais":
                extract_main = True
                extract_replies = False
            elif comment_type_filter == "Apenas respostas":
                extract_main = False
                extract_replies = True

            comments_df, extraction_info = extractor.get_comments(
                video_url,
                max_comments=max_comments,
                extract_main=extract_main,
                extract_replies=extract_replies
            )

            # Armazenar informa√ß√µes de extra√ß√£o na sess√£o
            st.session_state.extraction_info = extraction_info

            # Mostrar mensagem de sucesso com detalhes
            st.success(f"Extra√≠dos {len(comments_df)} coment√°rios de {extraction_info['available']} dispon√≠veis.")

            # Mostrar explica√ß√µes sobre a extra√ß√£o, se houver
            if extraction_info['reasons']:
                with st.expander("Detalhes da extra√ß√£o de coment√°rios", expanded=True):
                    for reason in extraction_info['reasons']:
                        st.info(reason)
        except Exception as e:
            st.error(f"Erro ao extrair coment√°rios: {e}")
            return None

    # Analisar sentimentos
    with st.spinner("Analisando sentimentos com a API do Gemini..."):
        try:
            analyzer = GeminiSentimentAnalyzer(gemini_api_key)
            # Passar o prompt personalizado se fornecido
            results_df = analyzer.batch_analyze(comments_df, custom_prompt=custom_prompt)
            st.success("An√°lise de sentimentos conclu√≠da!")
            return results_df
        except Exception as e:
            st.error(f"Erro ao analisar sentimentos: {e}")
            return None

# Bot√µes para controle da an√°lise
col1, col2 = st.sidebar.columns(2)

# Bot√£o para iniciar a an√°lise
if col1.button("Iniciar An√°lise", use_container_width=True):
    results_df = extract_and_analyze(custom_prompt)

    if results_df is not None:
        # Armazenar os resultados na sess√£o
        st.session_state.results = results_df
        st.session_state.analyzed = True

        # Atualizar a URL armazenada para a URL atual
        st.session_state.last_video_url = video_url

# Bot√£o para limpar dados manualmente
if col2.button("Limpar Dados", use_container_width=True):
    # Limpar todos os dados da sess√£o
    if 'analyzed' in st.session_state:
        del st.session_state.analyzed
    if 'results' in st.session_state:
        del st.session_state.results
    if 'extraction_info' in st.session_state:
        del st.session_state.extraction_info

    # Mostrar mensagem de confirma√ß√£o
    st.sidebar.success("Dados limpos com sucesso!")

# Verificar se h√° resultados na sess√£o
if 'analyzed' in st.session_state and st.session_state.analyzed:
    results_df = st.session_state.results

    # Mostrar informa√ß√µes sobre prompt personalizado se usado
    if not use_example_data and use_custom_prompt and custom_prompt:
        st.info(f"üéØ **An√°lise realizada com prompt personalizado:** {custom_prompt[:100]}{'...' if len(custom_prompt) > 100 else ''}")

    # Exibir resultados
    st.subheader("Resultados da An√°lise")

    # Estat√≠sticas gerais
    col1, col2, col3 = st.columns(3)

    with col1:
        total_positivos = len(results_df[results_df['sentiment'] == 'positivo'])
        st.metric("Coment√°rios Positivos", total_positivos)

    with col2:
        total_neutros = len(results_df[results_df['sentiment'] == 'neutro'])
        st.metric("Coment√°rios Neutros", total_neutros)

    with col3:
        total_negativos = len(results_df[results_df['sentiment'] == 'negativo'])
        st.metric("Coment√°rios Negativos", total_negativos)

    # Gr√°fico de distribui√ß√£o de sentimentos
    st.subheader("Distribui√ß√£o de Sentimentos")

    # Contagem de sentimentos
    sentiment_counts = results_df['sentiment'].value_counts().reset_index()
    sentiment_counts.columns = ['Sentimento', 'Contagem']

    # Criar gr√°fico com Plotly
    fig = px.pie(
        sentiment_counts,
        values='Contagem',
        names='Sentimento',
        color='Sentimento',
        color_discrete_map={
            'positivo': '#4CAF50',
            'neutro': '#FFC107',
            'negativo': '#F44336',
            'erro': '#9E9E9E'
        },
        title='Distribui√ß√£o de Sentimentos'
    )
    st.plotly_chart(fig)

    # Exibir tabela de coment√°rios
    st.subheader("Tabela de Coment√°rios")

    # Verificar se a coluna 'type' existe no DataFrame
    display_columns = ['author', 'text', 'sentiment', 'score', 'explanation']
    column_config = {
        'author': 'Autor',
        'text': 'Coment√°rio',
        'sentiment': 'Sentimento',
        'score': st.column_config.NumberColumn(
            'Pontua√ß√£o',
            format="%.2f"
        ),
        'explanation': 'Explica√ß√£o'
    }

    # Adicionar coluna de tipo se existir
    filtered_df = results_df.copy()
    if 'type' in results_df.columns:
        display_columns.insert(1, 'type')
        column_config['type'] = 'Tipo'

        # Adicionar filtro para tipo de coment√°rio
        st.subheader("Filtrar Coment√°rios")

        # Obter valores √∫nicos para o filtro
        tipos_comentarios = ['Todos'] + sorted(results_df['type'].unique().tolist())

        # Criar o filtro
        tipo_selecionado = st.selectbox("Filtrar por tipo de coment√°rio:", tipos_comentarios)

        # Aplicar o filtro se n√£o for "Todos"
        if tipo_selecionado != 'Todos':
            filtered_df = results_df[results_df['type'] == tipo_selecionado]
            st.write(f"Mostrando {len(filtered_df)} coment√°rios do tipo '{tipo_selecionado}'")

    # Adicionar coluna de autor do coment√°rio pai se existir
    if 'parent_author' in results_df.columns:
        display_columns.insert(2, 'parent_author')
        column_config['parent_author'] = 'Resposta para'

    # Adicionar filtro de sentimento
    if 'sentiment' in results_df.columns:
        col1, col2 = st.columns(2)
        with col1:
            sentimentos = ['Todos'] + sorted(results_df['sentiment'].unique().tolist())
            sentimento_selecionado = st.selectbox("Filtrar por sentimento:", sentimentos)
            if sentimento_selecionado != 'Todos':
                filtered_df = filtered_df[filtered_df['sentiment'] == sentimento_selecionado]

        with col2:
            # Adicionar campo de busca por texto
            texto_busca = st.text_input("Buscar no texto dos coment√°rios:")
            if texto_busca:
                filtered_df = filtered_df[filtered_df['text'].str.contains(texto_busca, case=False, na=False)]

    # Mostrar contagem de resultados filtrados
    st.write(f"Exibindo {len(filtered_df)} de {len(results_df)} coment√°rios")

    # Exibir a tabela filtrada
    st.dataframe(
        filtered_df[display_columns],
        column_config=column_config,
        hide_index=True
    )

    # Op√ß√£o para baixar os resultados
    csv = results_df.to_csv(index=False)
    st.download_button(
        label="Baixar resultados como CSV",
        data=csv,
        file_name="analise_comentarios_youtube.csv",
        mime="text/csv"
    )

# Informa√ß√µes adicionais
st.sidebar.markdown("---")
st.sidebar.subheader("Sobre")
st.sidebar.info("""
Esta aplica√ß√£o utiliza a API do YouTube para extrair coment√°rios e a API do Gemini para an√°lise de sentimentos.
Para usar, voc√™ precisa de chaves de API v√°lidas para ambos os servi√ßos.
""")

# Informa√ß√µes sobre o controle de taxa
st.sidebar.subheader("Limites de API")
st.sidebar.warning("""
**Controle de Taxa Implementado:**
- M√°ximo de 15 requisi√ß√µes por minuto para a API do Gemini
- A aplica√ß√£o aguardar√° automaticamente quando necess√°rio para respeitar este limite
- Isso evita erros de excesso de requisi√ß√µes e garante o funcionamento cont√≠nuo
""")

# Explica√ß√£o sobre a escala de sentimento
st.sidebar.subheader("Escala de Sentimento")
st.sidebar.markdown("""
- **-1.0 a -0.3**: Sentimento negativo
- **-0.3 a 0.3**: Sentimento neutro
- **0.3 a 1.0**: Sentimento positivo
""")

# Informa√ß√µes sobre prompt personalizado
st.sidebar.subheader("Prompt Personalizado")
st.sidebar.info("""
**Nova funcionalidade!** üéØ

Agora voc√™ pode personalizar a an√°lise de sentimentos fornecendo seu pr√≥prio prompt. Isso permite:

- An√°lises mais espec√≠ficas (ex: detectar ironia, sarcasmo)
- Considerar contexto cultural brasileiro
- Focar em aspectos espec√≠ficos como toxicidade
- Adaptar a an√°lise para diferentes dom√≠nios

O sistema sempre retornar√° sentimento, pontua√ß√£o e explica√ß√£o no formato padr√£o.
""")

# Rodap√©
st.markdown("---")
st.markdown("Desenvolvido com ‚ù§Ô∏è usando Streamlit, API do YouTube e API do Gemini")
